include:
  - jpo-utils/docker-compose.yml

services:
  geojsonconverter:
    profiles:
      - all
      - deduplicator_full
      - geojsonconverter
    image: usdotjpoode/geojsonconverter:2025-q1
    restart: ${RESTART_POLICY}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP:?error}
      KAFKA_TYPE: ${KAFKA_TYPE}
      CONFLUENT_KEY: ${CONFLUENT_KEY}
      CONFLUENT_SECRET: ${CONFLUENT_SECRET}
      geometry.output.mode: ${GEOMETRY_OUTPUT_MODE:-GEOJSON_ONLY}
      spring.kafka.bootstrap-servers: ${DOCKER_HOST_IP:?error}:9092
    logging: 
      options:
        max-size: "10m"
        max-file: "5"
    depends_on:
      kafka:
        condition: service_healthy
        required: false
  # ODE Services:
  ode:
    profiles:
      - all
      - deduplicator_full
      - ode
    image: usdotjpoode/jpo-ode:2025-q1
    restart: ${RESTART_POLICY}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    ports:
      - "8080:8080"
      - "9090:9090"
      - "46753:46753/udp"
      - "46800:46800/udp"
      - "47900:47900/udp"
      - "44900:44900/udp"
      - "44910:44910/udp"
      - "44920:44920/udp"
      - "44930:44930/udp"
      - "44940:44940/udp"
      - "44990:44990/udp"
      - "5555:5555/udp"
      - "6666:6666/udp"
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      ODE_KAFKA_BROKERS: ${DOCKER_HOST_IP}:9092
      KAFKA_TYPE: ${KAFKA_TYPE}
      CONFLUENT_KEY: ${CONFLUENT_KEY}
      CONFLUENT_SECRET: ${CONFLUENT_SECRET}
      KAFKA_LINGER_MS: ${KAFKA_LINGER_MS:-1}
      KAFKA_ACKS: ${KAFKA_ACKS:-all}
      KAFKA_RETRIES: ${KAFKA_RETRIES:-0}
      KAFKA_BATCH_SIZE: ${KAFKA_BATCH_SIZE:-16384}
      KAFKA_BUFFER_MEMORY: ${KAFKA_BUFFER_MEMORY:-33554432}
      KAFKA_COMPRESSION_TYPE: ${KAFKA_COMPRESSION_TYPE:-zstd}
      KAFKA_KEY_SERIALIZER: ${KAFKA_KEY_SERIALIZER:-org.apache.kafka.common.serialization.StringSerializer}
      KAFKA_VALUE_SERIALIZER: ${KAFKA_VALUE_SERIALIZER:-org.apache.kafka.common.serialization.StringSerializer}
      KAFKA_PARTITIONER_CLASS: ${KAFKA_PARTITIONER_CLASS:-org.apache.kafka.clients.producer.internals.DefaultPartitioner}
      ODE_TIM_INGEST_MONITORING_ENABLED: ${ODE_TIM_INGEST_MONITORING_ENABLED:-false}
      ODE_TIM_INGEST_MONITORING_INTERVAL: ${ODE_TIM_INGEST_MONITORING_INTERVAL:-20}
      ODE_STOMP_EXPORTER_ENABLED: ${ODE_STOMP_EXPORTER_ENABLED:-false}
    depends_on:
      kafka:
        condition: service_healthy
        required: false
    healthcheck:
      test: ["CMD", "wget" ,"--spider", "http://localhost:8080"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 10s
    logging:
      options:
        max-size: "10m"
        max-file: "5"

  adm:
    profiles:
      - all
      - deduplicator_full
      - adm
    image: usdotjpoode/asn1_codec:2025-q1
    restart: ${RESTART_POLICY}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP:?error}
      KAFKA_TYPE: ${KAFKA_TYPE}
      CONFLUENT_KEY: ${CONFLUENT_KEY}
      CONFLUENT_SECRET: ${CONFLUENT_SECRET}
      ACM_CONFIG_FILE: adm.properties
      ACM_LOG_TO_CONSOLE: ${ADM_LOG_TO_CONSOLE:-false}
      ACM_LOG_TO_FILE: ${ADM_LOG_TO_FILE:-true}
      ACM_LOG_LEVEL: ${ADM_LOG_LEVEL:-INFO}
    depends_on:
      kafka:
        condition: service_healthy
        required: false
    logging:
      options:
        max-size: "10m"
        max-file: "5"

  conflictmonitor:
    profiles:
      - all
      - deduplicator_full
      - conflictmonitor
    image: usdotjpoode/jpo-conflictmonitor:2025-q1
    restart: ${RESTART_POLICY}
    ports:
      - "8082:8082"
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP:?error}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:?error}
      kafka.topics.autoCreateTopics: false
      spring.kafka.bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:?error}
    healthcheck:
      test: ["CMD", "java", "-version"]
      interval: 10s
      timeout: 10s
      retries: 20
    logging:
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 3G
    depends_on:
      kafka:
        condition: service_healthy
        required: false
